name: Compile

on:
  push:
    branches: [ master, ccache_test ]
  pull_request:
    branches: [ master ]

jobs:
  centos-build:
    runs-on: ubuntu-20.04
    container: centos:7
    steps:
    - uses: actions/checkout@v3

    - name: Install centos environment
      shell: bash
      run: yum install -y git wget rpm* cpio make glibc-devel glibc-headers binutils m4

    - name: Cache deps
      id: cache-deps
      uses: actions/cache@v3
      env:
        cache-name: cache-deps
      with:
        key: ${{ runner.os }}-build-${{ env.cache-name }}-el7.x86_64-${{ hashFiles('deps/init/oceanbase.el7.x86_64.deps') }}
        path: deps/3rd
    
    - name: Build init
      run: |
        bash build.sh init
        echo "::add-path::${{github.workspace}}/deps/3rd/usr/local/oceanbase/devtools/bin"
        ccache -h


    - name: Setup ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        max-size: 10G
  
    - name: Build project
      shell: bash
      run: |
        bash build.sh debug -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
        cd build_debug && make -j4
  
  ubuntu-build:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v3

    - name: Install ubuntu environment
      shell: bash
      run: |
        export DEBIAN_FRONTEND=noninteractive
        sudo apt-get update
        sudo apt-get install -y git wget rpm rpm2cpio cpio make build-essential binutils m4 libtool-bin libncurses5

    - name: Cache deps
      id: cache-deps
      uses: actions/cache@v3
      env:
        cache-name: cache-deps
      with:
        key: ${{ runner.os }}-build-${{ env.cache-name }}-el9.x86_64-${{ hashFiles('deps/init/oceanbase.el9.x86_64.deps') }}
        path: deps/3rd
    
    - name: Build init
      run: |
        echo "${{github.workspace}}/deps/3rd/usr/local/oceanbase/devtools/bin" >> $GITHUB_PATH
        bash build.sh init

    - name: Setup ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        max-size: 10G
  
    - name: Build project
      shell: bash
      run: |
        bash build.sh debug -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
        cd build_debug && make -j4
